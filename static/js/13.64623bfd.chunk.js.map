{"version":3,"sources":["pages/Transferencias/MisCuentas.tsx"],"names":["MisCuentas","history","useHistory","id","useRouteMatch","params","_useState","useState","_useState2","Object","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","agree","setAgree","_useState3","_useState4","errors","setErrors","_useState5","_useState6","loading","setLoading","_useState7","_useState8","comprobanteActivado","setComprobanteActivado","_useState9","_useState10","miCuenta","setMiCuenta","_useState11","_useState12","cuentaDestino","setCuentaDestino","_useState13","Monto","CuentaDestino","Cuenta","_useState14","formModel","setFormModel","_useState15","_useState16","misCuentas","setMisCuentas","useEffect","cuentasService","obtener","then","data","catch","push","obtenerTodas","filter","x","NoCuenta","handleInputChange","_ref","target","prev","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","value","onSubmit","_ref2","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","e","errorsList","wrap","_context","next","preventDefault","concat","moneyFormat","parseFloat","toString","setTimeout","length","stop","_x","apply","this","arguments","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","Fragment","_App_components_Breadcrumb__WEBPACK_IMPORTED_MODULE_13__","title","items","name","path","isActive","_hoc_Aux__WEBPACK_IMPORTED_MODULE_16__","_Comprobante__WEBPACK_IMPORTED_MODULE_19__","monto","onCancel","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","style","width","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Header","Title","as","Body","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","md","Group","controlId","Label","Control","disabled","Text","className","marginBottom","onChange","map","item","key","lang","type","Check","custom","label","checked","textAlign","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","animation","size","role","aria-hidden","display","_App_components_UcFirst__WEBPACK_IMPORTED_MODULE_15__","text","_App_components_ErrorSection__WEBPACK_IMPORTED_MODULE_14__"],"mappings":"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","file":"static/js/13.64623bfd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row, Spinner } from \"react-bootstrap\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport Breadcrumb from \"../../App/components/Breadcrumb\";\r\nimport ErrorSection from \"../../App/components/ErrorSection\";\r\nimport UcFirst from \"../../App/components/UcFirst\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport { CuentaModel } from \"../../models/CuentaModel\";\r\nimport { TransferenciaModelo } from \"../../models/TransferenciaModel\";\r\nimport cuentasService from \"../../services/cuentasService\";\r\nimport { moneyFormat } from \"../../utils\";\r\nimport Comprobante from \"./Comprobante\";\r\n\r\nconst MisCuentas = () => {\r\n    \r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n    const { id }: any = match.params;\r\n\r\n    const [agree, setAgree] = useState<boolean>(false);\r\n    const [errors, setErrors] = useState<string[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [comprobanteActivado, setComprobanteActivado] = useState<boolean>(false);\r\n    const [miCuenta, setMiCuenta] = useState<CuentaModel>({} as CuentaModel);\r\n    const [cuentaDestino, setCuentaDestino] = useState<CuentaModel>({} as CuentaModel);\r\n\r\n    const [formModel, setFormModel] = useState<TransferenciaModelo>({\r\n        Monto: 0,\r\n        CuentaDestino: '-1',\r\n        Cuenta: id\r\n    } as TransferenciaModelo);\r\n\r\n\r\n    const [misCuentas, setMisCuentas] = useState<CuentaModel[]>([]);\r\n    useEffect(() => {\r\n        cuentasService.obtener(id)\r\n            .then((data) => {\r\n                setMiCuenta(data);\r\n            })\r\n            .catch((data) => {\r\n                history.push('/cuentas');\r\n            });\r\n        cuentasService.obtenerTodas()\r\n            .then(data => {\r\n                setMisCuentas(data.filter(x => x.NoCuenta !== id));\r\n            })\r\n            .catch();\r\n    }, []);\r\n\r\n    const handleInputChange = ({ target }: any) => {\r\n        setFormModel(prev => ({ ...prev, [target.id]: target.value }));\r\n    };\r\n\r\n    const onSubmit = async (e: any) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let errorsList: string[] = [];\r\n\r\n        if (formModel.CuentaDestino === '-1')\r\n            errorsList.push('Debe seleccionar una cuenta a la cual transferir');\r\n        else {\r\n\r\n            if (miCuenta.NoCuenta === formModel.CuentaDestino)\r\n                errorsList.push('No puedes transferir a tu misma cuenta');\r\n            else {\r\n                await cuentasService.obtener(formModel.CuentaDestino)\r\n                    .then((data) => {\r\n                        setCuentaDestino(data);\r\n                    })\r\n                    .catch((data) => {\r\n                        errorsList.push('La cuenta a la que desea transferir no existe');\r\n                    });\r\n            }\r\n        }\r\n        if (!formModel.Monto)\r\n            errorsList.push('Debe seleccionar un monto a transferir');\r\n\r\n        if (miCuenta.Monto < formModel.Monto)\r\n            errorsList.push(`El monto que desea transferir no esta disponible (${moneyFormat(parseFloat(formModel.Monto.toString()))})`);\r\n\r\n        setErrors(errorsList);\r\n\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n            if (errorsList.length === 0) {\r\n                setComprobanteActivado(true);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb\r\n                title={`Transferencia entre mis cuentas`}\r\n                items={[{\r\n                    name: 'Cuentas',\r\n                    path: '/cuentas',\r\n                    isActive: false\r\n                }, {\r\n                    name: `Cuenta No. ${id}`,\r\n                    path: `/cuentas/${id}`,\r\n                    isActive: false\r\n                }, {\r\n                    name: `Transferencia entre mis cuentas`,\r\n                    path: `/cuentas/${id}/expreso`,\r\n                    isActive: true\r\n                }]}\r\n            />\r\n            <Aux>\r\n                {!comprobanteActivado ? (\r\n                    <Row>\r\n                        <Card style={{ width: '100%' }}>\r\n                            <Form onSubmit={onSubmit}>\r\n                                <Card.Header>\r\n                                    <Card.Title as=\"h5\">Datos de transferencia</Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de mi cuenta</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"NoCuenta\">\r\n                                                <Form.Label>Mi Cuenta</Form.Label>\r\n                                                <Form.Control value={`Cuenta No. ${miCuenta.NoCuenta}`} disabled />\r\n                                                <Form.Text className=\"text-muted\">\r\n                                                    <b>Atención:</b> La información de la cuenta no debe ser compartida.\r\n                                                </Form.Text>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Balance\">\r\n                                                <Form.Label>Balance Actual</Form.Label>\r\n                                                <Form.Control value={`${moneyFormat(miCuenta.Monto)}`} disabled />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de cuenta destino</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"CuentaDestino\" style={{ marginBottom: '2.2rem' }}>\r\n                                                <Form.Label>Cuenta a Transferir</Form.Label>\r\n                                                <Form.Control as=\"select\" onChange={handleInputChange} value={formModel.CuentaDestino}>\r\n                                                    <option value=\"-1\" disabled>Selecciona una cuenta</option>\r\n                                                    {misCuentas.map(item => (\r\n                                                        <option key={item.NoCuenta} value={item.NoCuenta}>No. Cuenta {item.NoCuenta}</option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Monto\">\r\n                                                <Form.Label>Monto a transferir</Form.Label>\r\n                                                <Form.Control lang=\"en\" type=\"number\" onChange={handleInputChange} value={formModel.Monto.toString()} />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Check\r\n                                                    custom\r\n                                                    type=\"checkbox\"\r\n                                                    id=\"agree\"\r\n                                                    label=\"(Si, estoy de acuerdo) La transferencia se efectuara por un costo de 0.15%\"\r\n                                                    checked={agree}\r\n                                                    onChange={() => setAgree(prev => !prev)}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group style={{ textAlign: 'right' }}>\r\n                                                <Button type=\"submit\" variant=\"secondary\" disabled={!agree || loading}>\r\n                                                    <Spinner\r\n                                                        as=\"span\"\r\n                                                        animation=\"border\"\r\n                                                        size=\"sm\"\r\n                                                        role=\"status\"\r\n                                                        aria-hidden=\"true\"\r\n                                                        style={{ display: (loading) ? 'inline-block' : 'none' }}\r\n                                                    />\r\n                                                    <UcFirst text={(loading) ? \" Validando.. \" : \"Realizar transferencia\"} />\r\n                                                </Button>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <ErrorSection errors={errors} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Row>\r\n                ) : (\r\n                        <Comprobante\r\n                            miCuenta={miCuenta}\r\n                            cuentaDestino={cuentaDestino}\r\n                            monto={parseFloat(formModel.Monto.toString())}\r\n                            onCancel={() => setComprobanteActivado(false)}\r\n                        />\r\n                    )}\r\n            </Aux>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MisCuentas;"],"sourceRoot":""}