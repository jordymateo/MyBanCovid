{"version":3,"sources":["pages/Transferencias/MisCuentas2.tsx"],"names":["MisCuentas2","useHistory","_useState","useState","_useState2","Object","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","agree","setAgree","_useState3","_useState4","errors","setErrors","_useState5","_useState6","loading","setLoading","_useState7","_useState8","comprobanteActivado","setComprobanteActivado","_useState9","_useState10","cuentaDestino","setCuentaDestino","_useState11","Monto","CuentaDestino","Cuenta","_useState12","formModel","setFormModel","_useState13","_useState14","miCuenta","setMiCuenta","_useState15","_useState16","misCuentas","setMisCuentas","_useState17","_useState18","misCuentas2","setMisCuentas2","useEffect","cuentasService","obtenerTodas","then","data","catch","handleInputChange","_ref","target","id","obtener","value","filter","x","NoCuenta","prev","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","onSubmit","_ref2","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","e","errorsList","wrap","_context","next","preventDefault","push","concat","moneyFormat","parseFloat","toString","setTimeout","length","stop","_x","apply","this","arguments","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","Fragment","_App_components_Breadcrumb__WEBPACK_IMPORTED_MODULE_13__","title","items","name","path","isActive","_hoc_Aux__WEBPACK_IMPORTED_MODULE_16__","_Comprobante__WEBPACK_IMPORTED_MODULE_19__","monto","onCancel","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","style","width","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Header","Title","as","Body","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","md","Group","controlId","Label","Control","onChange","disabled","map","item","key","Text","className","marginBottom","type","Check","custom","label","checked","textAlign","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","animation","size","role","aria-hidden","display","_App_components_UcFirst__WEBPACK_IMPORTED_MODULE_15__","text","_App_components_ErrorSection__WEBPACK_IMPORTED_MODULE_14__"],"mappings":"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","file":"static/js/14.db720079.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row, Spinner } from \"react-bootstrap\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport Breadcrumb from \"../../App/components/Breadcrumb\";\r\nimport ErrorSection from \"../../App/components/ErrorSection\";\r\nimport UcFirst from \"../../App/components/UcFirst\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport { CuentaModel } from \"../../models/CuentaModel\";\r\nimport { TransferenciaModelo } from \"../../models/TransferenciaModel\";\r\nimport cuentasService from \"../../services/cuentasService\";\r\nimport { moneyFormat } from \"../../utils\";\r\nimport Comprobante from \"./Comprobante\";\r\n\r\nconst MisCuentas2 = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [agree, setAgree] = useState<boolean>(false);\r\n    const [errors, setErrors] = useState<string[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [comprobanteActivado, setComprobanteActivado] = useState<boolean>(false);\r\n    const [cuentaDestino, setCuentaDestino] = useState<CuentaModel>({} as CuentaModel);\r\n\r\n    const [formModel, setFormModel] = useState<TransferenciaModelo>({\r\n        Monto: 0,\r\n        CuentaDestino: '-1',\r\n        Cuenta: '-1'\r\n    } as TransferenciaModelo);\r\n\r\n\r\n    const [miCuenta, setMiCuenta] = useState<CuentaModel>({} as CuentaModel);\r\n    const [misCuentas, setMisCuentas] = useState<CuentaModel[]>([]);\r\n    const [misCuentas2, setMisCuentas2] = useState<CuentaModel[]>([]);\r\n    useEffect(() => {\r\n        cuentasService.obtenerTodas()\r\n            .then(data => {\r\n                setMisCuentas(data);\r\n            })\r\n            .catch();\r\n    }, []);\r\n\r\n    const handleInputChange = ({ target }: any) => {\r\n        if (target.id === 'Cuenta') {\r\n            cuentasService.obtener(target.value)\r\n                .then((data) => {\r\n                    setMiCuenta(data);\r\n                })\r\n                .catch((data) => {\r\n                    setErrors(['La cuenta no existe']);\r\n                });\r\n            setMisCuentas2(misCuentas.filter(x => x.NoCuenta !== target.value));\r\n        }\r\n\r\n        setFormModel(prev => ({ ...prev, [target.id]: target.value }));\r\n    };\r\n\r\n    const onSubmit = async (e: any) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let errorsList: string[] = [];\r\n\r\n        if (formModel.CuentaDestino === '-1')\r\n            errorsList.push('Debe seleccionar una cuenta a la cual transferir');\r\n        else {\r\n\r\n            if (formModel.Cuenta === formModel.CuentaDestino)\r\n                errorsList.push('No puedes transferir a tu misma cuenta');\r\n            else {\r\n                await cuentasService.obtener(formModel.CuentaDestino)\r\n                    .then((data) => {\r\n                        setCuentaDestino(data);\r\n                    })\r\n                    .catch((data) => {\r\n                        errorsList.push('La cuenta a la que desea transferir no existe');\r\n                    });\r\n            }\r\n        }\r\n        if (!formModel.Monto)\r\n            errorsList.push('Debe seleccionar un monto a transferir');\r\n\r\n        if (miCuenta.Monto < formModel.Monto)\r\n            errorsList.push(`El monto que desea transferir no esta disponible (${moneyFormat(parseFloat(formModel.Monto.toString()))})`);\r\n\r\n        setErrors(errorsList);\r\n\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n            if (errorsList.length === 0) {\r\n                setComprobanteActivado(true);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb\r\n                title={`Transferencia entre mis cuentas`}\r\n                items={[{\r\n                    name: 'Cuentas',\r\n                    path: '/cuentas',\r\n                    isActive: true\r\n                }, {\r\n                    name: `Transferencia entre mis cuentas`,\r\n                    path: `/transaccion_mis_cuentas`,\r\n                    isActive: true\r\n                }]}\r\n            />\r\n            <Aux>\r\n                {!comprobanteActivado ? (\r\n                    <Row>\r\n                        <Card style={{ width: '100%' }}>\r\n                            <Form onSubmit={onSubmit}>\r\n                                <Card.Header>\r\n                                    <Card.Title as=\"h5\">Datos de transferencia</Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de mi cuenta</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"Cuenta\">\r\n                                                <Form.Label>Mi Cuenta</Form.Label>\r\n                                                <Form.Control as=\"select\" onChange={handleInputChange} value={formModel.Cuenta}>\r\n                                                    <option value=\"-1\" disabled>Selecciona una cuenta</option>\r\n                                                    {misCuentas.map(item => (\r\n                                                        <option key={item.NoCuenta} value={item.NoCuenta}>No. Cuenta {item.NoCuenta}</option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                                {/* <Form.Label>Mi Cuenta</Form.Label>\r\n                                                <Form.Control value={`Cuenta No. ${miCuenta.NoCuenta}`} disabled /> */}\r\n                                                <Form.Text className=\"text-muted\">\r\n                                                    <b>Atención:</b> La información de la cuenta no debe ser compartida.\r\n                                                </Form.Text>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Balance\">\r\n                                                <Form.Label>Balance Actual</Form.Label>\r\n                                                <Form.Control value={`${moneyFormat(miCuenta.Monto)}`} disabled />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de cuenta destino</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"CuentaDestino\" style={{ marginBottom: '2.2rem' }}>\r\n                                                <Form.Label>Cuenta a Transferir</Form.Label>\r\n                                                <Form.Control as=\"select\" onChange={handleInputChange} value={formModel.CuentaDestino} disabled={misCuentas2.length === 0}>\r\n                                                    <option value=\"-1\" disabled>Selecciona una cuenta</option>\r\n                                                    {misCuentas2.map(item => (\r\n                                                        <option key={item.NoCuenta} value={item.NoCuenta}>No. Cuenta {item.NoCuenta}</option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Monto\">\r\n                                                <Form.Label>Monto a transferir</Form.Label>\r\n                                                <Form.Control type=\"number\" onChange={handleInputChange} value={formModel.Monto.toString()} />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Check\r\n                                                    custom\r\n                                                    type=\"checkbox\"\r\n                                                    id=\"agree\"\r\n                                                    label=\"(Si, estoy de acuerdo) La transferencia se efectuara por un costo de 0.15%\"\r\n                                                    checked={agree}\r\n                                                    onChange={() => setAgree(prev => !prev)}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group style={{ textAlign: 'right' }}>\r\n                                                <Button type=\"submit\" variant=\"secondary\" disabled={!agree || loading}>\r\n                                                    <Spinner\r\n                                                        as=\"span\"\r\n                                                        animation=\"border\"\r\n                                                        size=\"sm\"\r\n                                                        role=\"status\"\r\n                                                        aria-hidden=\"true\"\r\n                                                        style={{ display: (loading) ? 'inline-block' : 'none' }}\r\n                                                    />\r\n                                                    <UcFirst text={(loading) ? \" Validando.. \" : \"Realizar transferencia\"} />\r\n                                                </Button>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <ErrorSection errors={errors} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Row>\r\n                ) : (\r\n                        <Comprobante\r\n                            miCuenta={miCuenta}\r\n                            cuentaDestino={cuentaDestino}\r\n                            monto={parseFloat(formModel.Monto.toString())}\r\n                            onCancel={() => setComprobanteActivado(false)}\r\n                        />\r\n                    )}\r\n            </Aux>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MisCuentas2;"],"sourceRoot":""}