{"version":3,"sources":["services/beneficioService.ts","pages/Transferencias/Beneficiario.tsx"],"names":["axios__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_authService__WEBPACK_IMPORTED_MODULE_1__","beneficiariosService","crear","modelo","Promise","resolve","reject","ClienteId","authService","userData","Id","axios","post","concat","process","then","res","data","catch","err","editar","put","obtenerTodos","get","Beneficiario","history","useHistory","id","useRouteMatch","params","_useState","useState","_useState2","Object","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","agree","setAgree","_useState3","_useState4","errors","setErrors","_useState5","_useState6","loading","setLoading","_useState7","_useState8","comprobanteActivado","setComprobanteActivado","_useState9","_useState10","miCuenta","setMiCuenta","_useState11","_useState12","cuentaDestino","setCuentaDestino","_useState13","Monto","CuentaDestino","Cuenta","_useState14","formModel","setFormModel","_useState15","_useState16","beneficiarios","setBeneficiarios","useEffect","cuentasService","obtener","push","handleInputChange","_ref","target","prev","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","value","onSubmit","_ref2","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_Projects_Personal_P3_MyBanCovid_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","e","errorsList","wrap","_context","next","preventDefault","NoCuenta","moneyFormat","parseFloat","toString","setTimeout","length","stop","_x","apply","this","arguments","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","Fragment","_App_components_Breadcrumb__WEBPACK_IMPORTED_MODULE_13__","title","items","name","path","isActive","_hoc_Aux__WEBPACK_IMPORTED_MODULE_16__","_Comprobante__WEBPACK_IMPORTED_MODULE_20__","monto","onCancel","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","style","width","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Header","Title","as","Body","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","md","Group","controlId","Label","Control","disabled","Text","className","marginBottom","onChange","map","item","key","Titular","Alias","lang","type","Check","custom","label","checked","textAlign","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","animation","size","role","aria-hidden","display","_App_components_UcFirst__WEBPACK_IMPORTED_MODULE_15__","text","_App_components_ErrorSection__WEBPACK_IMPORTED_MODULE_14__"],"mappings":"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","file":"static/js/11.5dc0efe8.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { BeneficiarioModel } from '../models/BeneficiarioModel';\r\nimport authService from './authService';\r\n\r\nconst beneficiariosService = (() => {\r\n    return ({\r\n        crear(modelo: BeneficiarioModel): Promise<boolean> {\r\n            return new Promise<any>((resolve, reject) => {\r\n                modelo.ClienteId = authService.userData.Id;\r\n                axios.post(`${process.env.REACT_APP_API_URL}/api/beneficiarios/crear`, modelo)\r\n                    .then((res: any) => {\r\n                        resolve(res.data);\r\n                    })\r\n                    .catch((err: any) => {\r\n                        reject(err)\r\n                    });\r\n            });\r\n        },\r\n        editar(modelo: BeneficiarioModel): Promise<boolean> {\r\n            return new Promise<any>((resolve, reject) => {\r\n                modelo.ClienteId = authService.userData.Id;\r\n                axios.put(`${process.env.REACT_APP_API_URL}/api/beneficiarios/editar`, modelo)\r\n                    .then((res: any) => {\r\n                        resolve(res.data);\r\n                    })\r\n                    .catch((err: any) => {\r\n                        reject(err)\r\n                    });\r\n            });\r\n        },\r\n        obtenerTodos(): Promise<BeneficiarioModel[]> {\r\n            return new Promise<any>((resolve, reject) => {\r\n                axios.get(`${process.env.REACT_APP_API_URL}/api/beneficiarios/obtenertodos?clienteId=${authService.userData.Id}`)\r\n                    .then((res: any) => {\r\n                        resolve(res.data);\r\n                    })\r\n                    .catch((err: any) => {\r\n                        reject(err)\r\n                    });\r\n            });\r\n        }\r\n    });\r\n})();\r\n\r\nexport default beneficiariosService;","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row, Spinner } from \"react-bootstrap\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport Breadcrumb from \"../../App/components/Breadcrumb\";\r\nimport ErrorSection from \"../../App/components/ErrorSection\";\r\nimport UcFirst from \"../../App/components/UcFirst\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport { BeneficiarioModel } from \"../../models/BeneficiarioModel\";\r\nimport { CuentaModel } from \"../../models/CuentaModel\";\r\nimport { TransferenciaModelo } from \"../../models/TransferenciaModel\";\r\nimport beneficiariosService from \"../../services/beneficioService\";\r\nimport cuentasService from \"../../services/cuentasService\";\r\nimport { moneyFormat } from \"../../utils\";\r\nimport Comprobante from \"./Comprobante\";\r\n\r\nconst Beneficiario = () => {\r\n\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n    const { id }: any = match.params;\r\n\r\n    const [agree, setAgree] = useState<boolean>(false);\r\n    const [errors, setErrors] = useState<string[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [comprobanteActivado, setComprobanteActivado] = useState<boolean>(false);\r\n    const [miCuenta, setMiCuenta] = useState<CuentaModel>({} as CuentaModel);\r\n    const [cuentaDestino, setCuentaDestino] = useState<CuentaModel>({} as CuentaModel);\r\n\r\n    const [formModel, setFormModel] = useState<TransferenciaModelo>({\r\n        Monto: 0,\r\n        CuentaDestino: '-1',\r\n        Cuenta: id\r\n    } as TransferenciaModelo);\r\n\r\n\r\n    const [beneficiarios, setBeneficiarios] = useState<BeneficiarioModel[]>([]);\r\n    useEffect(() => {\r\n        cuentasService.obtener(id)\r\n            .then((data) => {\r\n                setMiCuenta(data);\r\n            })\r\n            .catch((data) => {\r\n                history.push('/cuentas');\r\n            });\r\n        beneficiariosService.obtenerTodos()\r\n            .then(data => {\r\n                setBeneficiarios(data);\r\n            })\r\n            .catch();\r\n    }, []);\r\n\r\n    const handleInputChange = ({ target }: any) => {\r\n        setFormModel(prev => ({ ...prev, [target.id]: target.value }));\r\n    };\r\n\r\n    const onSubmit = async (e: any) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        let errorsList: string[] = [];\r\n\r\n        if (formModel.CuentaDestino === '-1')\r\n            errorsList.push('Debe seleccionar una cuenta a la cual transferir');\r\n        else {\r\n\r\n            if (miCuenta.NoCuenta === formModel.CuentaDestino)\r\n                errorsList.push('No puedes transferir a tu misma cuenta');\r\n            else {\r\n                await cuentasService.obtener(formModel.CuentaDestino)\r\n                    .then((data) => {\r\n                        setCuentaDestino(data);\r\n                    })\r\n                    .catch((data) => {\r\n                        errorsList.push('La cuenta a la que desea transferir no existe');\r\n                    });\r\n            }\r\n        }\r\n        if (!formModel.Monto)\r\n            errorsList.push('Debe seleccionar un monto a transferir');\r\n\r\n        if (miCuenta.Monto < formModel.Monto)\r\n            errorsList.push(`El monto que desea transferir no esta disponible (${moneyFormat(parseFloat(formModel.Monto.toString()))})`);\r\n\r\n        setErrors(errorsList);\r\n\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n            if (errorsList.length === 0) {\r\n                setComprobanteActivado(true);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb\r\n                title={`Transferencia a beneficiario`}\r\n                items={[{\r\n                    name: 'Cuentas',\r\n                    path: '/cuentas',\r\n                    isActive: false\r\n                }, {\r\n                    name: `Cuenta No. ${id}`,\r\n                    path: `/cuentas/${id}`,\r\n                    isActive: false\r\n                }, {\r\n                    name: `Transferencia a beneficiario`,\r\n                    path: `/cuentas/${id}/expreso`,\r\n                    isActive: true\r\n                }]}\r\n            />\r\n            <Aux>\r\n                {!comprobanteActivado ? (\r\n                    <Row>\r\n                        <Card style={{ width: '100%' }}>\r\n                            <Form onSubmit={onSubmit}>\r\n                                <Card.Header>\r\n                                    <Card.Title as=\"h5\">Datos de transferencia</Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de mi cuenta</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"NoCuenta\">\r\n                                                <Form.Label>Mi Cuenta</Form.Label>\r\n                                                <Form.Control value={`Cuenta No. ${miCuenta.NoCuenta}`} disabled />\r\n                                                <Form.Text className=\"text-muted\">\r\n                                                    <b>Atención:</b> La información de la cuenta no debe ser compartida.\r\n                                                </Form.Text>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Balance\">\r\n                                                <Form.Label>Balance Actual</Form.Label>\r\n                                                <Form.Control value={`${moneyFormat(miCuenta.Monto)}`} disabled />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <h5>Información de cuenta destino</h5>\r\n                                            <hr />\r\n                                            <Form.Group controlId=\"CuentaDestino\" style={{ marginBottom: '2.2rem' }}>\r\n                                                <Form.Label>Beneficiario a Transferir</Form.Label>\r\n                                                <Form.Control as=\"select\" onChange={handleInputChange} value={formModel.CuentaDestino}>\r\n                                                    <option value=\"-1\" disabled>Selecciona un beneficiario</option>\r\n                                                    {beneficiarios.map(item => (\r\n                                                        <option key={item.CuentaDestino} value={item.CuentaDestino}>{item.Titular} - No. Cuenta {item.CuentaDestino} ({item.Alias})</option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"Monto\">\r\n                                                <Form.Label>Monto a transferir</Form.Label>\r\n                                                <Form.Control lang=\"en\" type=\"number\" onChange={handleInputChange} value={formModel.Monto.toString()} />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n                                                <Form.Check\r\n                                                    custom\r\n                                                    type=\"checkbox\"\r\n                                                    id=\"agree\"\r\n                                                    label=\"(Si, estoy de acuerdo) La transferencia se efectuara por un costo de 0.15%\"\r\n                                                    checked={agree}\r\n                                                    onChange={() => setAgree(prev => !prev)}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Form.Group style={{ textAlign: 'right' }}>\r\n                                                <Button type=\"submit\" variant=\"secondary\" disabled={!agree || loading}>\r\n                                                    <Spinner\r\n                                                        as=\"span\"\r\n                                                        animation=\"border\"\r\n                                                        size=\"sm\"\r\n                                                        role=\"status\"\r\n                                                        aria-hidden=\"true\"\r\n                                                        style={{ display: (loading) ? 'inline-block' : 'none' }}\r\n                                                    />\r\n                                                    <UcFirst text={(loading) ? \" Validando.. \" : \"Realizar transferencia\"} />\r\n                                                </Button>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <ErrorSection errors={errors} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Row>\r\n                ) : (\r\n                        <Comprobante\r\n                            miCuenta={miCuenta}\r\n                            cuentaDestino={cuentaDestino}\r\n                            monto={parseFloat(formModel.Monto.toString())}\r\n                            onCancel={() => setComprobanteActivado(false)}\r\n                        />\r\n                    )}\r\n            </Aux>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Beneficiario;"],"sourceRoot":""}